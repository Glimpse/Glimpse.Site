// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC
{
    static readonly VersionClass s_Version = new VersionClass();
    public static VersionClass Version { get { return s_Version; } }
    public static Glimpse.Site.Controllers.CommunityController Community = new Glimpse.Site.Controllers.T4MVC_CommunityController();
    public static Glimpse.Site.Controllers.DocsController Docs = new Glimpse.Site.Controllers.T4MVC_DocsController();
    public static Glimpse.Site.Controllers.HomeController Home = new Glimpse.Site.Controllers.T4MVC_HomeController();
    public static Glimpse.Site.Controllers.PackagesController Packages = new Glimpse.Site.Controllers.T4MVC_PackagesController();
    public static Glimpse.Site.Controllers.ProtocolController Protocol = new Glimpse.Site.Controllers.T4MVC_ProtocolController();
    public static Glimpse.Site.Controllers.SupportController Support = new Glimpse.Site.Controllers.T4MVC_SupportController();
    public static Glimpse.Site.Controllers.TalkController Talk = new Glimpse.Site.Controllers.T4MVC_TalkController();
    public static Glimpse.Site.Controllers.VersionsController Versions = new Glimpse.Site.Controllers.T4MVC_VersionsController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class VersionClass
    {
        public readonly string Name = "Version";
        public Glimpse.Site.Areas.Version.Controllers.AdminController Admin = new Glimpse.Site.Areas.Version.Controllers.T4MVC_AdminController();
        public Glimpse.Site.Areas.Version.Controllers.CheckController Check = new Glimpse.Site.Areas.Version.Controllers.T4MVC_CheckController();
        public Glimpse.Site.Areas.Version.Controllers.InstallController Install = new Glimpse.Site.Areas.Version.Controllers.T4MVC_InstallController();
        public T4MVC.Version.SharedController Shared = new T4MVC.Version.SharedController();
    }
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
                      
        public static readonly string glimpse_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/glimpse.min.js") ? Url("glimpse.min.js") : Url("glimpse.js");
                      
        public static readonly string glimpse_protocol_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/glimpse.protocol.min.js") ? Url("glimpse.protocol.min.js") : Url("glimpse.protocol.js");
                      
        public static readonly string jquery_1_9_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.9.1.intellisense.min.js") ? Url("jquery-1.9.1.intellisense.min.js") : Url("jquery-1.9.1.intellisense.js");
                      
        public static readonly string jquery_1_9_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.9.1.min.js") ? Url("jquery-1.9.1.min.js") : Url("jquery-1.9.1.js");
                      
        public static readonly string jquery_1_9_1_min_js = Url("jquery-1.9.1.min.js");
        public static readonly string jquery_1_9_1_min_map = Url("jquery-1.9.1.min.map");
        public static readonly string json_format_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/json.format.min.js") ? Url("json.format.min.js") : Url("json.format.js");
                      
        public static readonly string site_google_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/site.google.min.js") ? Url("site.google.min.js") : Url("site.google.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string close_quote_gif = Url("close-quote.gif");
        public static readonly string cs_leftImg_png = Url("cs_leftImg.png");
        public static readonly string cs_rightImg_png = Url("cs_rightImg.png");
        public static readonly string favicon_gif = Url("favicon.gif");
        public static readonly string github_gif = Url("github.gif");
        public static readonly string glimpse100___Copy_png = Url("glimpse100 - Copy.png");
        public static readonly string glimpse100_png = Url("glimpse100.png");
        public static readonly string glimpse128_png = Url("glimpse128.png");
        public static readonly string glimpse150_png = Url("glimpse150.png");
        public static readonly string glimpse256_png = Url("glimpse256.png");
        public static readonly string glimpse32_png = Url("glimpse32.png");
        public static readonly string glimpse512_png = Url("glimpse512.png");
        public static readonly string glimpse64___Copy_png = Url("glimpse64 - Copy.png");
        public static readonly string glimpse64_png = Url("glimpse64.png");
        public static readonly string glimpseLogo_png = Url("glimpseLogo.png");
        public static readonly string glimpseLogoWhite_png = Url("glimpseLogoWhite.png");
        public static readonly string glimpseMedium_png = Url("glimpseMedium.png");
        public static readonly string GlimpseStackAd_png = Url("GlimpseStackAd.png");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Help {
            private const string URLPATH = "~/Content/Help";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string FilesPlugin_jpg = Url("FilesPlugin.jpg");
            public static readonly string HelloWorldPlugin_jpg = Url("HelloWorldPlugin.jpg");
        }
    
        public static readonly string jquery_contentslider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.contentslider.min.css") ? Url("jquery.contentslider.min.css") : Url("jquery.contentslider.css");
             
        public static readonly string jquery_jscrollpane_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.jscrollpane.min.css") ? Url("jquery.jscrollpane.min.css") : Url("jquery.jscrollpane.css");
             
        public static readonly string nugetlogo_png = Url("nugetlogo.png");
        public static readonly string open_quote_gif = Url("open-quote.gif");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Plugin {
            private const string URLPATH = "~/Content/Plugin";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Ajax_jpg = Url("Ajax.jpg");
            public static readonly string Binding_jpg = Url("Binding.jpg");
            public static readonly string Config_jpg = Url("Config.jpg");
            public static readonly string enviro_png = Url("enviro.png");
            public static readonly string Environment_jpg = Url("Environment.jpg");
            public static readonly string Execution_jpg = Url("Execution.jpg");
            public static readonly string Metadata_jpg = Url("Metadata.jpg");
            public static readonly string Remote_jpg = Url("Remote.jpg");
            public static readonly string Request_jpg = Url("Request.jpg");
            public static readonly string Routes_jpg = Url("Routes.jpg");
            public static readonly string Server_jpg = Url("Server.jpg");
            public static readonly string Session_jpg = Url("Session.jpg");
            public static readonly string switchServers_png = Url("switchServers.png");
            public static readonly string Timeline_jpg = Url("Timeline.jpg");
            public static readonly string TimelineAlt_jpg = Url("TimelineAlt.jpg");
            public static readonly string Trace_jpg = Url("Trace.jpg");
            public static readonly string TraceIcons_png = Url("TraceIcons.png");
            public static readonly string View_jpg = Url("View.jpg");
        }
    
        public static readonly string rss_icon_gif = Url("rss_icon.gif");
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Support {
            private const string URLPATH = "~/Content/Support";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string GlimpseCredits_jpg = Url("GlimpseCredits.jpg");
            public static readonly string GlimpseDetails_jpg = Url("GlimpseDetails.jpg");
            public static readonly string GlimpseOverview_jpg = Url("GlimpseOverview.jpg");
            public static readonly string GlimpsePlatform_jpg = Url("GlimpsePlatform.jpg");
            public static readonly string GlimpseQuickStart_jpg = Url("GlimpseQuickStart.jpg");
            public static readonly string GlimpseSupport_jpg = Url("GlimpseSupport.jpg");
            public static readonly string GlimpseTalk_jpg = Url("GlimpseTalk.jpg");
            public static readonly string WhatIsGlimpse_jpg = Url("WhatIsGlimpse.jpg");
        }
    
        public static readonly string twitter_png = Url("twitter.png");
        public static readonly string uservoice_icon_png = Url("uservoice-icon.png");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


